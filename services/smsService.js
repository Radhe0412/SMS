const twilio = require('twilio');
require('dotenv').config(); // Load .env at the very top

class SMSService {
    constructor() {
        // Safety check for environment variables
        if (!process.env.TWILIO_ACCOUNT_SID || !process.env.TWILIO_AUTH_TOKEN || !process.env.TWILIO_PHONE_NUMBER) {
            throw new Error(
                'Twilio credentials missing! Please check your .env file:\n' +
                'TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER'
            );
        }

        this.client = twilio(
            process.env.TWILIO_ACCOUNT_SID,
            process.env.TWILIO_AUTH_TOKEN
        );
        this.fromNumber = process.env.TWILIO_PHONE_NUMBER;
        console.log(`âœ… Twilio client initialized. From number: ${this.fromNumber}`);
    }

    async sendRiskAlert(to, studentData, riskFactors) {
        try {
            const riskSummary = this.formatRiskFactors(riskFactors);
            const message = this.buildRiskAlertMessage(studentData, riskSummary);

            const result = await this.client.messages.create({
                body: message,
                from: this.fromNumber,
                to: to
            });

            console.log(`SMS sent successfully to ${to}. Message SID: ${result.sid}`);
            return { success: true, messageSid: result.sid };
        } catch (error) {
            console.error('Error sending SMS:', error.message);
            return { success: false, error: error.message };
        }
    }

    async sendNotification(to, message) {
        try {
            const result = await this.client.messages.create({
                body: message,
                from: this.fromNumber,
                to: to
            });

            console.log(`Notification SMS sent to ${to}. Message SID: ${result.sid}`);
            return { success: true, messageSid: result.sid };
        } catch (error) {
            console.error('Error sending notification SMS:', error.message);
            return { success: false, error: error.message };
        }
    }

    async sendBulkRiskAlerts(recipients) {
        const results = [];
        for (const recipient of recipients) {
            const result = await this.sendRiskAlert(
                recipient.phone,
                recipient.studentData,
                recipient.riskFactors
            );
            results.push({ phone: recipient.phone, ...result });
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        return results;
    }

    formatRiskFactors(riskFactors) {
        const factorMap = {
            low_attendance: 'Low attendance',
            failing_grades: 'Failing grades',
            multiple_attempts: 'Multiple exam attempts',
            late_fees: 'Late fee payments',
            behavioral_issues: 'Behavioral concerns',
            family_issues: 'Family-related issues'
        };
        return riskFactors.map(f => factorMap[f] || f).join(', ');
    }

    buildRiskAlertMessage(studentData, riskSummary) {
        return `ðŸš¨ STUDENT RISK ALERT ðŸš¨

Student: ${studentData.name}
ID: ${studentData.studentId}
Class: ${studentData.class}

Risk Factors: ${riskSummary}

Please review the student's progress and consider intervention strategies.

Generated by Dropout Prediction System
Time: ${new Date().toLocaleString()}`;
    }

    async sendWeeklySummary(counselorPhone, summaryData) {
        const message = `ðŸ“Š WEEKLY SUMMARY REPORT

Total Students Monitored: ${summaryData.totalStudents}
At-Risk Students: ${summaryData.atRiskCount}
New Alerts This Week: ${summaryData.newAlerts}
Interventions Completed: ${summaryData.interventionsCompleted}

Top Risk Factors:
${summaryData.topRiskFactors.map(f => `â€¢ ${f}`).join('\n')}

Please log in to the dashboard for detailed reports.

Generated: ${new Date().toLocaleDateString()}`;

        return await this.sendNotification(counselorPhone, message);
    }
}

module.exports = SMSService;
